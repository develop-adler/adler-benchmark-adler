import{CompressedTexture as e,CompressedArrayTexture as t,CompressedCubeTexture as r,Data3DTexture as o,DataTexture as s,DisplayP3ColorSpace as a,FileLoader as i,FloatType as n,HalfFloatType as d,NoColorSpace as p,LinearFilter as l,LinearMipmapLinearFilter as c,LinearDisplayP3ColorSpace as T,LinearSRGBColorSpace as h,Loader as u,RedFormat as m,RGB_ETC1_Format as C,RGB_ETC2_Format as f,RGB_PVRTC_4BPPV1_Format as E,RGB_S3TC_DXT1_Format as S,RGBA_ASTC_4x4_Format as g,RGBA_ASTC_6x6_Format as w,RGBA_BPTC_Format as R,RGBA_ETC2_EAC_Format as _,RGBA_PVRTC_4BPPV1_Format as F,RGBA_S3TC_DXT5_Format as B,RGBAFormat as A,RGFormat as P,SRGBColorSpace as x,UnsignedByteType as L}from"three";import{WorkerPool as y}from"../utils/WorkerPool.js";import{read as G,KHR_DF_FLAG_ALPHA_PREMULTIPLIED as $,KHR_DF_TRANSFER_SRGB as b,KHR_SUPERCOMPRESSION_NONE as U,KHR_SUPERCOMPRESSION_ZSTD as k,VK_FORMAT_UNDEFINED as X,VK_FORMAT_R16_SFLOAT as K,VK_FORMAT_R16G16_SFLOAT as M,VK_FORMAT_R16G16B16A16_SFLOAT as v,VK_FORMAT_R32_SFLOAT as W,VK_FORMAT_R32G32_SFLOAT as O,VK_FORMAT_R32G32B32A32_SFLOAT as H,VK_FORMAT_R8_SRGB as D,VK_FORMAT_R8_UNORM as V,VK_FORMAT_R8G8_SRGB as I,VK_FORMAT_R8G8_UNORM as j,VK_FORMAT_R8G8B8A8_SRGB as z,VK_FORMAT_R8G8B8A8_UNORM as N,VK_FORMAT_ASTC_6x6_SRGB_BLOCK as Y,VK_FORMAT_ASTC_6x6_UNORM_BLOCK as Q,KHR_DF_PRIMARIES_UNSPECIFIED as q,KHR_DF_PRIMARIES_BT709 as J,KHR_DF_PRIMARIES_DISPLAYP3 as Z}from"../libs/ktx-parse.module.js";import{ZSTDDecoder as ee}from"../libs/zstddec.module.js";let _taskCache=new WeakMap,_activeLoaders=0,_zstd;class KTX2Loader extends u{constructor(e){super(e),this.transcoderPath="",this.transcoderBinary=null,this.transcoderPending=null,this.workerPool=new y,this.workerSourceURL="",this.workerConfig=null,"undefined"!=typeof MSC_TRANSCODER&&console.warn('THREE.KTX2Loader: Please update to latest "basis_transcoder". "msc_basis_transcoder" is no longer supported in three.js r125+.')}setTranscoderPath(e){return this.transcoderPath=e,this}setWorkerLimit(e){return this.workerPool.setWorkerLimit(e),this}detectSupport(e){return!0===e.isWebGPURenderer?this.workerConfig={astcSupported:e.hasFeature("texture-compression-astc"),etc1Supported:!1,etc2Supported:e.hasFeature("texture-compression-etc2"),dxtSupported:e.hasFeature("texture-compression-bc"),bptcSupported:!1,pvrtcSupported:!1}:(this.workerConfig={astcSupported:e.extensions.has("WEBGL_compressed_texture_astc"),etc1Supported:e.extensions.has("WEBGL_compressed_texture_etc1"),etc2Supported:e.extensions.has("WEBGL_compressed_texture_etc"),dxtSupported:e.extensions.has("WEBGL_compressed_texture_s3tc"),bptcSupported:e.extensions.has("EXT_texture_compression_bptc"),pvrtcSupported:e.extensions.has("WEBGL_compressed_texture_pvrtc")||e.extensions.has("WEBKIT_WEBGL_compressed_texture_pvrtc")},e.capabilities.isWebGL2&&(this.workerConfig.etc1Supported=!1)),this}init(){if(!this.transcoderPending){let e=new i(this.manager);e.setPath(this.transcoderPath),e.setWithCredentials(this.withCredentials);let t=e.loadAsync("basis_transcoder.js"),r=new i(this.manager);r.setPath(this.transcoderPath),r.setResponseType("arraybuffer"),r.setWithCredentials(this.withCredentials);let o=r.loadAsync("basis_transcoder.wasm");this.transcoderPending=Promise.all([t,o]).then(([e,t])=>{let r=KTX2Loader.BasisWorker.toString(),o=["/* constants */","let _EngineFormat = "+JSON.stringify(KTX2Loader.EngineFormat),"let _TranscoderFormat = "+JSON.stringify(KTX2Loader.TranscoderFormat),"let _BasisFormat = "+JSON.stringify(KTX2Loader.BasisFormat),"/* basis_transcoder.js */",e,"/* worker */",r.substring(r.indexOf("{")+1,r.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([o])),this.transcoderBinary=t,this.workerPool.setWorkerCreator(()=>{let e=new Worker(this.workerSourceURL),t=this.transcoderBinary.slice(0);return e.postMessage({type:"init",config:this.workerConfig,transcoderBinary:t},[t]),e})}),_activeLoaders>0&&console.warn("THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances."),_activeLoaders++}return this.transcoderPending}load(e,t,r,o){if(null===this.workerConfig)throw Error("THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.");let s=new i(this.manager);s.setResponseType("arraybuffer"),s.setWithCredentials(this.withCredentials),s.load(e,e=>{if(_taskCache.has(e)){let r=_taskCache.get(e);return r.promise.then(t).catch(o)}this._createTexture(e).then(e=>t?t(e):null).catch(o)},r,o)}_createTextureFrom(o,s){let{faces:a,width:i,height:n,format:d,type:p,error:T,dfdFlags:h}=o;if("error"===p)return Promise.reject(T);let u;if(6===s.faceCount)u=new r(a,d,L);else{let m=a[0].mipmaps;u=s.layerCount>1?new t(m,i,n,s.layerCount,d,L):new e(m,i,n,d,L)}return u.minFilter=1===a[0].mipmaps.length?l:c,u.magFilter=l,u.generateMipmaps=!1,u.needsUpdate=!0,u.colorSpace=parseColorSpace(s),u.premultiplyAlpha=!!(h&$),u}async _createTexture(e,t={}){let r=G(new Uint8Array(e));if(r.vkFormat!==X)return createRawTexture(r);let o=t,s=this.init().then(()=>this.workerPool.postMessage({type:"transcode",buffer:e,taskConfig:o},[e])).then(e=>this._createTextureFrom(e.data,r));return _taskCache.set(e,{promise:s}),s}dispose(){return this.workerPool.dispose(),this.workerSourceURL&&URL.revokeObjectURL(this.workerSourceURL),_activeLoaders--,this}}KTX2Loader.BasisFormat={ETC1S:0,UASTC_4x4:1},KTX2Loader.TranscoderFormat={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16},KTX2Loader.EngineFormat={RGBAFormat:A,RGBA_ASTC_4x4_Format:g,RGBA_BPTC_Format:R,RGBA_ETC2_EAC_Format:_,RGBA_PVRTC_4BPPV1_Format:F,RGBA_S3TC_DXT5_Format:B,RGB_ETC1_Format:C,RGB_ETC2_Format:f,RGB_PVRTC_4BPPV1_Format:E,RGB_S3TC_DXT1_Format:S},KTX2Loader.BasisWorker=function(){let e,t,r,o=_EngineFormat,s=_TranscoderFormat,a=_BasisFormat;self.addEventListener("message",function(i){let c=i.data;switch(c.type){case"init":var T;e=c.config,T=c.transcoderBinary,t=new Promise(e=>{BASIS(r={wasmBinary:T,onRuntimeInitialized:e})}).then(()=>{r.initializeBasis(),void 0===r.KTX2File&&console.warn("THREE.KTX2Loader: Please update Basis Universal transcoder.")});break;case"transcode":t.then(()=>{try{let{faces:t,buffers:i,width:T,height:h,hasAlpha:u,format:m,dfdFlags:C}=function t(i){let c=new r.KTX2File(new Uint8Array(i));function T(){c.close(),c.delete()}if(!c.isValid())throw T(),Error("THREE.KTX2Loader:	Invalid or unsupported .ktx2 file");let h=c.isUASTC()?a.UASTC_4x4:a.ETC1S,u=c.getWidth(),m=c.getHeight(),C=c.getLayers()||1,f=c.getLevels(),E=c.getFaces(),S=c.getHasAlpha(),g=c.getDFDFlags(),{transcoderFormat:w,engineFormat:R}=function t(r,i,l,c){let T,h,u=r===a.ETC1S?n:d;for(let m=0;m<u.length;m++){let C=u[m];if(e[C.if]&&C.basisFormat.includes(r)&&(!c||!(C.transcoderFormat.length<2))&&(!C.needsPowerOfTwo||p(i)&&p(l)))return T=C.transcoderFormat[c?1:0],h=C.engineFormat[c?1:0],{transcoderFormat:T,engineFormat:h}}return console.warn("THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32."),T=s.RGBA32,h=o.RGBAFormat,{transcoderFormat:T,engineFormat:h}}(h,u,m,S);if(!u||!m||!f)throw T(),Error("THREE.KTX2Loader:	Invalid texture");if(!c.startTranscoding())throw T(),Error("THREE.KTX2Loader: .startTranscoding failed");let _=[],F=[];for(let B=0;B<E;B++){let A=[];for(let P=0;P<f;P++){let x=[],L,y;for(let G=0;G<C;G++){let $=c.getImageLevelInfo(P,G,B);0===B&&0===P&&0===G&&($.origWidth%4!=0||$.origHeight%4!=0)&&console.warn("THREE.KTX2Loader: ETC1S and UASTC textures should use multiple-of-four dimensions."),f>1?(L=$.origWidth,y=$.origHeight):(L=$.width,y=$.height);let b=new Uint8Array(c.getImageTranscodedSizeInBytes(P,G,0,w)),U=c.transcodeImage(b,P,G,B,w,0,-1,-1);if(!U)throw T(),Error("THREE.KTX2Loader: .transcodeImage failed.");x.push(b)}let k=l(x);A.push({data:k,width:L,height:y}),F.push(k.buffer)}_.push({mipmaps:A,width:u,height:m,format:R})}return T(),{faces:_,buffers:F,width:u,height:m,hasAlpha:S,format:R,dfdFlags:g}}(c.buffer);self.postMessage({type:"transcode",id:c.id,faces:t,width:T,height:h,hasAlpha:u,format:m,dfdFlags:C},i)}catch(f){console.error(f),self.postMessage({type:"error",id:c.id,error:f.message})}})}});let i=[{if:"astcSupported",basisFormat:[a.UASTC_4x4],transcoderFormat:[s.ASTC_4x4,s.ASTC_4x4],engineFormat:[o.RGBA_ASTC_4x4_Format,o.RGBA_ASTC_4x4_Format],priorityETC1S:1/0,priorityUASTC:1,needsPowerOfTwo:!1},{if:"bptcSupported",basisFormat:[a.ETC1S,a.UASTC_4x4],transcoderFormat:[s.BC7_M5,s.BC7_M5],engineFormat:[o.RGBA_BPTC_Format,o.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{if:"dxtSupported",basisFormat:[a.ETC1S,a.UASTC_4x4],transcoderFormat:[s.BC1,s.BC3],engineFormat:[o.RGB_S3TC_DXT1_Format,o.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{if:"etc2Supported",basisFormat:[a.ETC1S,a.UASTC_4x4],transcoderFormat:[s.ETC1,s.ETC2],engineFormat:[o.RGB_ETC2_Format,o.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{if:"etc1Supported",basisFormat:[a.ETC1S,a.UASTC_4x4],transcoderFormat:[s.ETC1],engineFormat:[o.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{if:"pvrtcSupported",basisFormat:[a.ETC1S,a.UASTC_4x4],transcoderFormat:[s.PVRTC1_4_RGB,s.PVRTC1_4_RGBA],engineFormat:[o.RGB_PVRTC_4BPPV1_Format,o.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0},],n=i.sort(function(e,t){return e.priorityETC1S-t.priorityETC1S}),d=i.sort(function(e,t){return e.priorityUASTC-t.priorityUASTC});function p(e){return e<=2||(e&e-1)==0&&0!==e}function l(e){if(1===e.length)return e[0];let t=0;for(let r=0;r<e.length;r++){let o=e[r];t+=o.byteLength}let s=new Uint8Array(t),a=0;for(let i=0;i<e.length;i++){let n=e[i];s.set(n,a),a+=n.byteLength}return s}};let UNCOMPRESSED_FORMATS=new Set([A,P,m]),FORMAT_MAP={[H]:A,[v]:A,[N]:A,[z]:A,[O]:P,[M]:P,[j]:P,[I]:P,[W]:m,[K]:m,[D]:m,[V]:m,[Y]:w,[Q]:w},TYPE_MAP={[H]:n,[v]:d,[N]:L,[z]:L,[O]:n,[M]:d,[j]:L,[I]:L,[W]:n,[K]:d,[D]:L,[V]:L,[Y]:L,[Q]:L};async function createRawTexture(t){let{vkFormat:r}=t;if(void 0===FORMAT_MAP[r])throw Error("THREE.KTX2Loader: Unsupported vkFormat.");let a;t.supercompressionScheme===k&&(_zstd||(_zstd=new Promise(async e=>{let t=new ee;await t.init(),e(t)})),a=await _zstd);let i=[];for(let p=0;p<t.levels.length;p++){let l=Math.max(1,t.pixelWidth>>p),c=Math.max(1,t.pixelHeight>>p),T=t.pixelDepth?Math.max(1,t.pixelDepth>>p):0,h=t.levels[p],u;if(t.supercompressionScheme===U)u=h.levelData;else if(t.supercompressionScheme===k)u=a.decode(h.levelData,h.uncompressedByteLength);else throw Error("THREE.KTX2Loader: Unsupported supercompressionScheme.");let m;m=TYPE_MAP[r]===n?new Float32Array(u.buffer,u.byteOffset,u.byteLength/Float32Array.BYTES_PER_ELEMENT):TYPE_MAP[r]===d?new Uint16Array(u.buffer,u.byteOffset,u.byteLength/Uint16Array.BYTES_PER_ELEMENT):u,i.push({data:m,width:l,height:c,depth:T})}let C;if(UNCOMPRESSED_FORMATS.has(FORMAT_MAP[r]))C=0===t.pixelDepth?new s(i[0].data,t.pixelWidth,t.pixelHeight):new o(i[0].data,t.pixelWidth,t.pixelHeight,t.pixelDepth);else{if(t.pixelDepth>0)throw Error("THREE.KTX2Loader: Unsupported pixelDepth.");C=new e(i,t.pixelWidth,t.pixelHeight)}return C.mipmaps=i,C.type=TYPE_MAP[r],C.format=FORMAT_MAP[r],C.colorSpace=parseColorSpace(t),C.needsUpdate=!0,Promise.resolve(C)}function parseColorSpace(e){let t=e.dataFormatDescriptor[0];return t.colorPrimaries===J?t.transferFunction===b?x:h:t.colorPrimaries===Z?t.transferFunction===b?a:T:t.colorPrimaries===q?p:(console.warn(`THREE.KTX2Loader: Unsupported color primaries, "${t.colorPrimaries}"`),p)}export{KTX2Loader};